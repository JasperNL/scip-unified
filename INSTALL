* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                           *
*                  This file is part of the program and library             *
*         SCIP --- Solving Constraint Integer Programs                      *
*                                                                           *
*    Copyright (C) 2002-2009 Konrad-Zuse-Zentrum                            *
*                            fuer Informationstechnik Berlin                *
*                                                                           *
*  SCIP is distributed under the terms of the ZIB Academic License.         *
*                                                                           *
*  You should have received a copy of the ZIB Academic License              *
*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      *
*                                                                           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

In the following, some of the names depend on your machine and your
compilation settings:

- $(OSTYPE): the operating system
             the string returned by "uname -s" in lower case with the following
             replacements:
             - "cygwin*" is replaced by only "cygwin"
             - "irix??" is replaced by only "irix"
             - "windows*" is replaced by only "windows"

- $(ARCH):   the architecture
             the string returned by "uname -m", modified by the following
             rules to subsume some architectures:
              - "sun??" is replaced by "sparc"
              - "i?86" is replaced by "x86"
              - "IP??" is replaced by "mips"
              - "9000????" is replaced by "hppa"
              - "Power Macintosh" is replaced by "ppc"
              - "00??????????" is replaced by "pwr4"

- $(COMP):   the compiler
             "gnu", "intel", "compaq", "sun", "insure", ... (see make/ directory)

- $(OPT):    the optimization level of compilation
             "dbg", "opt", or "prf"

- $(LPS):    the LP solver to use
             "spx", "spx132", "spx121", "clp", "cpx", "xprs", "msk"

For example, if you want to install SCIP on a Linux system with a x86 processor
using the gnu compiler in debug mode, and using Soplex version >= 1.4.0
as LP solver, you would have the following names:
- $(OSTYPE) = linux
- $(ARCH)   = x86
- $(COMP)   = gnu
- $(OPT)    = dbg
- $(LPS)    = spx

-----------------------------------------------------------------------------

Here is what you have to do to get SCIP running:

1. Compile the library and the solver program:
   In your SCIP main directory, enter "make [options]" with the following options:
   - "OPT=opt"         to use optimized compilation mode (default)
   - "OPT=opt-gcc42"   to use if compiler gcc4.2 or greater is available
   - "OPT=dbg"         to use debug compilation mode
   - "OPT=prf"         to use performance analysis compilation mode

   - "LPS=spx"         to use SOPLEX Version >= 1.4.0 as LP solver (default)
   - "LPS=spx132"      to use SOPLEX Version 1.3.2 as LP solver
   - "LPS=spx121"      to use SOPLEX Version <= 1.2.1 as LP solver
   - "LPS=cpx"         to use CPLEX as LP solver
   - "LPS=xprs"        to use XPRESS as LP solver
   - "LPS=msk"         to use MOSEK as LP solver
   - "LPS=clp"         to use CLP as LP solver

   - "COMP=gnu"        to use GNU c/c++ compiler (default)
   - other compilers are available (see make/ directory)

   - "ZLIB=true"       to use zlib and enable reading of compressed files (default)
   - "ZLIB=false"      disable zlib usage

   - "READLINE=true"   to enable readline library for interactive shell (default)
   - "READLINE=false"  to disable readline library

   - "ZIMPL=true"      to enable ZIMPL file reader (default; needs ZIMPL, ZLIB, and GMP to be installed, see 2. (g))
   - "ZIMPL=false"     to disable ZIMPL file reader

   - "GMP=true"        to use GMP library for exact counting
   - "GMP=false"       disable GMP usage; Note that GMP=false is not compatible with ZIMP=true since ZIMPL needs the GMP library 
   - "GMP=auto"        to automaticaly link the GMP library in case ZIMPL is enabled (default)
 
   - "VERBOSE=false"   to suppress display of compiler and linker invocations (default)
   - "VERBOSE=true"    to display compiler and linker invocations

   On some machines, you should use gmake instead of make.

   On your first compilation you will be asked for some soft-link targets, depending on the
   LP solver you want to use. Usually, SCIP needs the following information
     (a) the directory where the include files of the LP solver
     (b) the library file(s) "lib*.a" or/and "lib*.so"
   You will need either the .a or the .so files and can skip the others by just pressing return.

   Example 1 (defaults: SoPlex, with ZIMPL support):
   =================================================

   Typing "make" uses SoPlex as LP solver and includes support for the modeling language ZIMPL.
   You will be asked the following questions on the first call to "make" (example answers are already given):

---
make[1]: Entering directory `/sw/scip'

** creating softlinks: LPS=spx OSTYPE=linux ARCH=x86 COMP=gnu SUFFIX= ZIMPL=true

** creating directory "lib/zimplinc"
** missing soft-link "lib/spxinc"
** enter soft-link target file or directory for "lib/spxinc" (return if not needed): /sw/soplex/src
-> creating softlink "lib/spxinc" -> "/sw/soplex/src"

** missing soft-link "lib/libsoplex.linux.x86.gnu.a"
** enter soft-link target file or directory for "lib/libsoplex.linux.x86.gnu.a" (return if not needed): /sw/soplex/lib/libsoplex.linux.x86.gnu.opt.a
-> creating softlink "lib/libsoplex.linux.x86.gnu.a" -> "/sw/soplex/lib/libsoplex.linux.x86.gnu.opt.a"

** missing soft-link "lib/libsoplex.linux.x86.gnu.so"
** this soft-link is not necessarily needed since "lib/libsoplex.linux.x86.gnu.a" already exists - press return to skip
** enter soft-link target file or directory for "lib/libsoplex.linux.x86.gnu.so" (return if not needed):
-> skipped creation of softlink "lib/libsoplex.linux.x86.gnu.so". Call "make links" if needed later.

** missing soft-link "lib/zimplinc/zimpl"
** enter soft-link target file or directory for "lib/zimplinc/zimpl" (return if not needed): /sw/zimpl/src
-> creating softlink "lib/zimplinc/zimpl" -> "/sw/zimpl/src"

** missing soft-link "lib/libzimpl.linux.x86.gnu.a"
** enter soft-link target file or directory for "lib/libzimpl.linux.x86.gnu.a" (return if not needed): /sw/zimpl/lib/libzimpl.linux.x86.gnu.opt.a
-> creating softlink "lib/libzimpl.linux.x86.gnu.a" -> "/sw/zimpl/lib/libzimpl.linux.x86.gnu.opt.a"

** missing soft-link "lib/libzimpl.linux.x86.gnu.so"
** this soft-link is not necessarily needed since "lib/libzimpl.linux.x86.gnu.a" already exists - press return to skip
** enter soft-link target file or directory for "lib/libzimpl.linux.x86.gnu.so" (return if not needed):
-> skipped creation of softlink "lib/libzimpl.linux.x86.gnu.so". Call "make links" if needed later.

make[1]: Leaving directory `/sw/scip'
---

   Example 2 (CPLEX, no ZIMPL):
   ============================

   Typing "make LPS=cpx ZIMPL=false" uses CPLEX as LP solver. You will be asked the following questions on
   the first call to "make" (example answers are already given):
---
make[1]: Entering directory `/sw/scip'

** creating softlinks: LPS=cpx OSTYPE=linux ARCH=x86 COMP=gnu SUFFIX= ZIMPL=false

** missing soft-link "lib/cpxinc"
** enter soft-link target file or directory for "lib/cpxinc" (return to skip): /sw/cplex/include/ilcplex
-> creating softlink "lib/cpxinc" -> "/sw/cplex/include/ilcplex"

** missing soft-link "lib/libcplex.linux.x86.gnu.a"
** enter soft-link target file or directory for "lib/libcplex.linux.x86.gnu.a" (return to skip): /sw/cplex/lib/x86_rhel4.0_3.4/static_pic/libcplex.a
-> creating softlink "lib/libcplex.linux.x86.gnu.a" -> "/sw/cplex/lib/x86_rhel4.0_3.4/static_pic/libcplex.a"

** missing soft-link "lib/libcplex.linux.x86.gnu.so"
** enter soft-link target file or directory for "lib/libcplex.linux.x86.gnu.so" (return to skip):
-> skipped creation of softlink "lib/libcplex.linux.x86.gnu.so". Call "make links" if needed later.

make[1]: Leaving directory `/sw/scip'
---

   If you ever need to modify the soft-link targets, delete the soft-links in the "lib/" subdirectory
   and enter "make links" to generate them again.

   After the soft-links have been created, the compilation of the source files should start.


   Compilation problems:
   =====================

   If the soft-link query script does not work on your machine, read step 2 for instructions on manually
   creating the soft-links.

   If you get an error message of the type
   "make: *** No rule to make target `lib/???', needed by `obj/O.linux.x86.gnu.opt/lib/scip/???.o'.  Stop."
   the corresponding soft-link was not created or points to a wrong location.
   Check the soft-link targets in the "lib/" subdirectory. Try to delete all soft-links from the "lib/" directory
   and call "make links" to generate them again. If this still fails, read step 2 for instructions on manually
   creating the soft-links.

   If you get an error message of the type
   "make: *** No rule to make target `make/make.?.?.?.?.?'.  Stop.",
   the corresponding machine dependent makefile for your architecture and compiler is missing.
   Create one of the given name in the "make/" subdirectory. You may take
   "make/make.linux.x86.gnu.opt" or any other file in the make subdirectory as example.

   The readline library seems to differ sligtly on different OS distributions. Some versions
   do not support the remove_history() call.
   In this case, you have to either add "-DNO_REMOVE_HISTORY" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_REMOVE_HISTORY".
   Make sure, the file "src/scip/dialog.c" is recompiled.
   If this doesn't work either, disable the readline library with "make READLINE=false".

   On some systems, the sigaction() method is not available.
   In this case, you have to either add "-DNO_SIGACTION" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_SIGACTION".
   Make sure, the file "src/scip/interrupt.c" is recompiled.

   On some systems, the rand_r() method is not available.
   In this case, you have to either add "-DNO_RAND_R" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_RAND_R".
   Make sure, the file "src/scip/misc.c" is recompiled.

   On some systems, the strtok_r() method is not available.
   In this case, you have to either add "-DNO_STRTOK_R" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_STRTOK_R".
   Make sure, the file "src/scip/misc.c" is recompiled.

   On some systems, the strerror_r() method is not available.
   In this case, you have to either add "-DNO_STRERROR_R" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_STRERROR_R".
   Make sure, the file "src/scip/misc.c" is recompiled.

   On some systems, the option [-e] is not available for the read command.
   You have to compile with READ=read.

   If you encounter other compiler or linker errors, you should recompile with
   "make VERBOSE=true ..." in order to get the full compiler invocation. This might help to
   fix the corresponding machine dependent makefile in the make subdirectory.


2. Instructions for manually creating the soft-links, if the query script fails:

   Create necessary soft-links in the "lib/" subdirectory of SCIP:

   (a) to use SOPLEX (Version >= 1.4.0)
       - ln -s <path to SOPLEX' *.h files> <path to SCIP>/lib/spxinc
       - ln -s <file libsoplex.[...].a> <path to SCIP>/lib/libsoplex.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /soplex/lib/libsoplex.linux.x86.gnu.opt.a lib/libsoplex.linux.x86.gnu.a")
         Warning! The ".opt" in the name of the SOPLEX library does not appear in the name of the soft-link.

   (a) to use SOPLEX (Version 1.3.2)
       - ln -s <path to SOPLEX' *.h files> <path to SCIP>/lib/spx132inc
       - ln -s <file libsoplex.[...].a> <path to SCIP>/lib/libsoplex132.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /soplex132/lib/libsoplex.linux.x86.gnu.opt.a lib/libsoplex132.linux.x86.gnu.a")
         Warning! The ".opt" in the name of the SOPLEX library does not appear in the name of the soft-link.

   (b) to use SOPLEX (Version <= 1.2.1)
       - ln -s <path to SOPLEX' *.h files> <path to SCIP>/lib/spx121inc
       - ln -s <file libsoplex.[...].a> <path to SCIP>/lib/libsoplex121.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /soplex121/lib/libsoplex.linux.x86.gnu.opt.a lib/libsoplex121.linux.x86.gnu.a")
         Warning! The ".opt" in the name of the SOPLEX library does not appear in the name of the soft-link.

   (c) to use CPLEX (Version >= 8.0)
       - ln -s <path to directory of cplex.h> <path to SCIP>/lib/cpxinc
         (e.g. "cd scip; ln -s /cplex90/include/ilcplex lib/cpxinc")
       - ln -s <file libcplex.a> <path to SCIP>/lib/libcplex.$(OSTYPE).$(ARCH).$(COMP).a
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /cplex90/lib/i86_linux2_glibc2.3_gcc3.2/static_pic/libcplex.a lib/libcplex.linux.x86.gnu.a")

   (d) to use XPRESS
       - ln -s <path to directory of xprs.h> <path to SCIP>/lib/xprsinc
         (e.g. "cd scip; ln -s /xpressmp/include lib/xprsinc")
       - ln -s <file libxprs.a> <path to SCIP>/lib/libxprs.$(OSTYPE).$(ARCH).$(COMP).a
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /xpressmp/lib/libxprs.a lib/libxprs.linux.x86.gnu.a")

   (e) to use MOSEK
       - ln -s <path to directory of mosek.h> <path to SCIP>/lib/mskinc
         (e.g. "cd scip; ln -s /mosek/4/tools/platform/linux32x86/h lib/mskinc")
       - ln -s <file libmosek.so> <path to SCIP>/lib/libmosek.$(OSTYPE).$(ARCH).$(COMP).so
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /mosek/4/tools/platform/linux32x86/bin/libmosek.so lib/libmosek.linux.x86.gnu.so")
       - since MOSEK is a shared library, make sure your LD_LIBRARY_PATH contains <path to SCIP>/lib

   (f) to use CLP
       - ln -s <path to CLP's and COIN's *.h files> <path to SCIP>/lib/clpinc
         (e.g. "cd scip; ln -s /Coin-Clp/include lib/clpinc")
       - ln -s <file libClp.a> <path to SCIP>/lib/libclp.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /Coin-Clp/lib/libClp.a lib/libclp.linux.x86.gnu.a")
       - ln -s <file libCoin.a> <path to SCIP>/lib/libcoin.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /Coin-Clp/lib/libCoinUtils.a lib/libcoinutils.linux.x86.gnu.a")

   (g) to use ZIMPL as additional file reader for reading *.zpl files
       - mkdir <path to SCIP>/lib/zimplinc
       - ln -s <path to ZIMPL's *.h files> <path to SCIP>/lib/zimplinc/zimpl
       - ln -s <file libzimpl-<version>.<options>.a> <path to SCIP>/lib/libzimpl.$(OSTYPE).$(ARCH).$(COMP).a
       Note that ZIMPL needs the GNU multiprecision library (GMP) and the Z compression library (ZLIB) to be
       installed on your system.

3. To run the program enter "bin/scip.$(OSTYPE).$(ARCH).$(COMP).$(OPT).$(LPS)"
   (e.g. "bin/scip.linux.x86.gnu.opt.spx")

4. To generate the documentation, you need to have doxygen installed, and
   enter "make doc"

5. To check the code with lint, you need to have flexelint installed, and
   enter "make lint"

6. To run the MIPLIB 3 test bench, download the MIPLIB instances from
   "http://scip.zib.de/download/files/scip-miplib3.zip" and extract the archive into the SCIP base directory.
   The instances will be unziped into the subdirectory "check/IP/miplib3/". Afterwards, enter
   "make [options] test" with the same options with which you compiled SCIP in step 1.



Remarks on Installing under Windows using MinGW
-----------------------------------------------

To build your own windows binaries under windows we recommend using the MinGW-Compiler with MSYS from mingw.org .

First install MSYS, then MinGW to the mingw folder inside the msys folder.
Now you need to install the following packages to the mingw folder:
- zlib (or use ZLIB=false)
- pcre (here suffices the pcre7.0-lib.zip (or equivalent) to be extracted into the mingw-folder)

(After calling "make clean" in the ZIMPL folder you will also need flex and bison to remake ZIMPL. We recommend NOT to use "make clean" inside the ZIMPL-folder if you do not have these packages installed.)

You can download these additional packages from
http://gnuwin32.sourceforge.net/packages.html
or compile the source on your own from their homepages.

Second you need to copy the file sh.exe to bash.exe otherwise various scripts (including makefiles) will not work.
Normally the unistd.h covers also the getopt-options, but for mingw you need to add the entry
#include <getopt.h>
into the /mingw/include/unistd.h after the other include-entries (if not present).

At last there is one package you need to compile if you want to use ZIMPL and ZIMPL-support in SCIP (otherwise use ZIMPL=false as parameter with the make-call):
the gmplib from gmplib.org
The command "./configure --prefix=/mingw ; make ; make install" should succeed without problems and installs the gmplib to the mingw folder.

Now "make READLINE=false" should be compiling without errors.
Please note that we do NOT support creating the doxygen documentation and readline-usage under windows.
